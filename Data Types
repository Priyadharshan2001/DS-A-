1. Array
The most basic yet important data structure is the array. It is a linear data structure. An array is a collection of homogeneous data types where the elements are allocated contiguous memory. Because of the contiguous allocation of memory, any element of an array can be accessed in constant time. Each array element has a corresponding index number. 

Array Data Structure
Array Data Structure

To learn more about arrays, refer to the article “Introduction to Arrays“.

Here are some topics about array which you must learn:

Reverse Array – Reverse an array means shifting the elements of an array in a reverse manner i.e., the last element becomes the first element, second last element becomes the second element, and so on. 
Rotation of Array – Rotation of array means shifting the elements of an array in a circular manner i.e., in the case of right circular shift the last element becomes the first element, and all other element moves one point to the right. 
Rearranging an array – Rearrangement of array elements suggests the changing of an initial order of elements following some conditions or operations.
Range queries in the array – Often you need to perform operations on a range of elements. These functions are known as range queries.
Multidimensional array – These are arrays having more than one dimension. The most used one is the 2-dimensional array, commonly known as a matrix.
Kadane’s algorithm
Dutch national flag algorithm
Related posts:

Introduction to Arrays
Practice Problems on Array
2. String
A string is also a type of array. It can be interpreted as an array of characters. But it has some special characteristics like the last character of a string is a null character to denote the end of the string. Also, there are some unique operations, like concatenation which concatenates two strings into one.

String Data Structure
String Data Structure

Here we are providing you with some must-know concepts of string:

Subsequence and substring – A subsequence is a sequence that can be derived from a string deleting one or more elements. A substring is a contiguous segment of the string.
Reverse and rotation in a string – Reverse operation is interchanging the position of characters of a string such that the first becomes the last, the second becomes the second last, and so on.
Binary String – A binary string is a string made up of only two types of characters.
Palindrome – A palindrome string is a string in which the elements at the same distance from the center of the string are the same.
Lexicographic pattern – Lexicographical pattern is the pattern based on the ASCII value or can be said in dictionary order.
Pattern searching – Pattern searching is searching a given pattern in the string. It is an advanced topic of string.
Related posts:

Introduction to String
Practice Problems on String
3. Linked Lists
As the above data structures, the linked list is also a linear data structure. But Linked List is different from Array in its configuration. It is not allocated to contiguous memory locations. Instead, each node of the linked list is allocated to some random memory space and the previous node maintains a pointer that points to this node. So no direct memory access of any node is possible and it is also dynamic i.e., the size of the linked list can be adjusted at any time. To learn more about linked lists refer to the article “Introduction to Linked List“.

Linked List Data Structure
Linked List Data Structure

The topics which you must want to cover are:

Singly Linked List – In this, each node of the linked list points only to its next node.
Circular Linked List – This is the type of linked list where the last node points back to the head of the linked list.
Doubly Linked List – In this case, each node of the linked list holds two pointers, one point to the next node and the other points to the previous node.
Related posts:

Introduction to Linked Lists
Practice Problems on Linked Lists
4. Matrix/Grid
A matrix represents a collection of numbers arranged in an order of rows and columns. It is necessary to enclose the elements of a matrix in parentheses or brackets.

For example:

A matrix with 9 elements is shown below.

This Matrix M has 3 rows and 3 columns. Each element of matrix M can be referred to by its row and column number. For example, M[2][3] = 6.

Related posts:

Introduction to Matrix/Grid
Practice Problems on Matrix/Grid
5. Stack
Now you should move to some more complex data structures, such as Stack and Queue. 

Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).

Stack Data Structure
Stack Data Structure

The reason why Stack is considered a complex data structure is that it uses other data structures for implementation, such as Arrays, Linked lists, etc. based on the characteristics and features of Stack data structure.

Related posts:

Introduction to Stack
Practice Problems on Stack
6. Queue
Another data structure that is similar to Stack, yet different in its characteristics, is Queue.

A Queue is a linear structure which follows First In First Out (FIFO) approach in its individual operations.

Queue Data Structure
Queue Data Structure

A queue can be of different types like 

Circular queue – In a circular queue the last element is connected to the first element of the queue
Double-ended queue (or known as deque) – A double-ended queue is a special type of queue where one can perform the operations from both ends of the queue.
Priority queue – It is a special type of queue where the elements are arranged as per their priority. A low priority element is dequeued after a high priority element.
Related posts:

Introduction to Queue
Practice Problems on Queue
7. Heap
A Heap is a special Tree-based Data Structure in which the tree is a complete binary tree.

Types of heaps:

Generally, heaps are of two types.

Max-Heap: 

In this heap, the value of the root node must be the greatest among all its child nodes and the same thing must be done for its left and right sub-tree also.

Min-Heap: 

In this heap, the value of the root node must be the smallest among all its child nodes and the same thing must be done for its left ans right sub-tree also.

Types of Heap Data Structure
Types of Heap Data Structure

Related posts:

Introduction to Heap
Practice Problems on Heap
8. Hash
Hashing refers to the process of generating a fixed-size output from an input of variable size using the mathematical formulas known as hash functions. This technique determines an index or location for the storage of an item in a data structure.

Hashing, A Complete Tutorial
What is Hashing

Related posts:

Introduction to Hash
Practice Problems on Hash
9. Tree Data Structures
After having the basics covered about the linear data structure, now it is time to take a step forward to learn about the non-linear data structures. The first non-linear data structure you should learn is the tree. 

Tree data structure is similar to a tree we see in nature but it is upside down. It also has a root and leaves. The root is the first node of the tree and the leaves are the ones at the bottom-most level. The special characteristic of a tree is that there is only one path to go from any of its nodes to any other node.

Tree Data Structure
Tree Data Structure

Based on the maximum number of children of a node of the tree it can be – 

Binary tree – This is a special type of tree where each node can have a maximum of 2 children.
Ternary tree – This is a special type of tree where each node can have a maximum of 3 children.
N-ary tree – In this type of tree, a node can have at most N children.
Based on the configuration of nodes there are also several classifications. Some of them are:

Complete Binary Tree – In this type of binary tree all the levels are filled except maybe for the last level. But the last level elements are filled as left as possible.
Perfect Binary Tree – A perfect binary tree has all the levels filled
Binary Search Tree – A binary search tree is a special type of binary tree where the smaller node is put to the left of a node and a higher value node is put to the right of a node
Ternary Search Tree – It is similar to a binary search tree, except for the fact that here one element can have at most 3 children.
Related posts:

Introduction to Tree
Practice Problems on Tree
10. Graph Data Structure
Another important non-linear data structure is the graph. It is similar to the Tree data structure, with the difference that there is no particular root or leaf node, and it can be traversed in any order.

A Graph is a non-linear data structure consisting of a finite set of vertices(or nodes) and a set of edges that connect a pair of nodes. 

Graph Data Structure
Graph Data Structure

Each edge shows a connection between a pair of nodes. This data structure helps solve many real-life problems. Based on the orientation of the edges and the nodes there are various types of graphs. 

Here are some must to know concepts of graphs:

Types of graphs – There are different types of graphs based on connectivity or weights of nodes.
Introduction to BFS and DFS – These are the algorithms for traversing through a graph
Cycles in a graph – Cycles are a series of connections following which we will be moving in a loop.
Topological sorting in the graph
Minimum Spanning tree in graph
Related posts:

Introduction to Graph
Practice Problems on Graph
